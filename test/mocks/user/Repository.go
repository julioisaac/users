// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/julioisaac/users/user"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, u
func (_m *Repository) Create(ctx context.Context, u user.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByParams provides a mock function with given fields: ctx, f
func (_m *Repository) GetUserByParams(ctx context.Context, f user.Filters) (user.Users, error) {
	ret := _m.Called(ctx, f)

	var r0 user.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.Filters) (user.Users, error)); ok {
		return rf(ctx, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.Filters) user.Users); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.Filters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
